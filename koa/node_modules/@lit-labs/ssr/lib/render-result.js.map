{"version":3,"file":"render-result.js","sourceRoot":"","sources":["../src/lib/render-result.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAiBH;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,MAAoB,EAAmB,EAAE;IAC3E,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;QAC3B,KAAK;YACH,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC;IACzE,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,MAAoB,EAAU,EAAE;IAChE,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;QAC3B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,KAAK,IAAI,KAAK,CAAC;QACjB,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CACb,+CAA+C;gBAC7C,2BAA2B,CAC9B,CAAC;QACJ,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * A rendered value as an iterable of strings or Promises of a RenderResult.\n *\n * This type is a synchronous Iterable so that consumers do not have to await\n * every value according to the JS asynchronous iterator protocol, which would\n * cause additional overhead compared to a sync iterator.\n *\n * Consumers should check the type of each value emitted by the iterator, and\n * if it is a Promise await it if possible, or throw an error.\n *\n * The utility functions {@link collectRenderResult} and\n * {@link collectRenderResultSync} do this for you.\n */\nexport type RenderResult = Iterable<string | Promise<RenderResult>>;\n\n/**\n * Joins a RenderResult into a string\n */\nexport const collectResult = async (result: RenderResult): Promise<string> => {\n  let value = '';\n  for (const chunk of result) {\n    value +=\n      typeof chunk === 'string' ? chunk : await collectResult(await chunk);\n  }\n  return value;\n};\n\n/**\n * Joins a RenderResult into a string synchronously.\n *\n * This function throws if a RenderResult contains a Promise.\n */\nexport const collectResultSync = (result: RenderResult): string => {\n  let value = '';\n  for (const chunk of result) {\n    if (typeof chunk === 'string') {\n      value += chunk;\n    } else {\n      throw new Error(\n        'Promises not supported in collectResultSync. ' +\n          'Please use collectResult.'\n      );\n    }\n  }\n  return value;\n};\n"]}