{"version":3,"file":"render.js","sourceRoot":"","sources":["../src/lib/render.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,kBAAkB,EAAC,MAAM,2BAA2B,CAAC;AAC7D,OAAO,EAAC,WAAW,EAAC,MAAM,mBAAmB,CAAC;AAK9C,OAAO,EAAC,gBAAgB,EAAC,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAC,YAAY,EAAC,MAAM,sBAAsB,CAAC;AAGlD;;;;;;;;;;;GAWG;AACH,MAAM,SAAS,CAAC,CAAC,MAAM,CACrB,KAAc,EACd,UAAgC;IAEhC,MAAM,iBAAiB,GAAG;QACxB,gBAAgB,EAAE,CAAC,kBAAkB,CAAC;QACtC,0BAA0B,EAAE,EAAE;QAC9B,sBAAsB,EAAE,EAAE;QAC1B,cAAc,EAAE,KAAK;KACtB,CAAC;IACF,UAAU,GAAG,EAAC,GAAG,iBAAiB,EAAE,GAAG,UAAU,EAAC,CAAC;IACnD,IAAI,UAAU,GAAG,IAAI,CAAC;IACtB,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC5B,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IACD,KAAK,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,UAAwB,EAAE,UAAU,CAAC,CAAC;AAClE,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElementRenderer} from './lit-element-renderer.js';\nimport {renderValue} from './render-value.js';\n\nimport type {RenderInfo} from './render-value.js';\nexport type {RenderInfo} from './render-value.js';\nimport type {RenderResult} from './render-result.js';\nimport {isTemplateResult} from 'lit-html/directive-helpers.js';\nimport {isHydratable} from './server-template.js';\nexport type {RenderResult} from './render-result.js';\n\n/**\n * Renders a lit-html template (or any renderable lit-html value) to a string\n * iterator. Any custom elements encountered will be rendered if a matching\n * ElementRenderer is found.\n *\n * This method is suitable for streaming the contents of the element.\n *\n * @param value Value to render\n * @param renderInfo Optional render context object that should be passed\n *   to any reentrant calls to `render`, e.g. from a `renderShadow` callback\n *   on an ElementRenderer.\n */\nexport function* render(\n  value: unknown,\n  renderInfo?: Partial<RenderInfo>\n): RenderResult {\n  const defaultRenderInfo = {\n    elementRenderers: [LitElementRenderer],\n    customElementInstanceStack: [],\n    customElementHostStack: [],\n    deferHydration: false,\n  };\n  renderInfo = {...defaultRenderInfo, ...renderInfo};\n  let hydratable = true;\n  if (isTemplateResult(value)) {\n    hydratable = isHydratable(value);\n  }\n  yield* renderValue(value, renderInfo as RenderInfo, hydratable);\n}\n"]}