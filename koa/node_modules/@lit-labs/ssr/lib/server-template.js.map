{"version":3,"file":"server-template.js","sourceRoot":"","sources":["../src/lib/server-template.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EACL,IAAI,IAAI,QAAQ,GAGjB,MAAM,UAAU,CAAC;AAClB,OAAO,EAAC,QAAQ,EAAC,MAAM,uBAAuB,CAAC;AAE/C,MAAM,WAAW,GAAG,CAAC,CAAC;AAMtB;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,UAAU,IAAI,CAClB,OAA6B,EAC7B,GAAG,MAAiB;IAEpB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CACb,+RAA+R,CAChS,CAAC;IACJ,CAAC;IACD,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,EAAE,GAAG,MAAM,CAA2B,CAAC;IACrE,KAAK,CAAC,qBAAqB,GAAG,WAAW,CAAC;IAC1C,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,QAA6B,EAAW,EAAE;IACrE,OAAO,QAAQ,CAAC,qBAAqB,KAAK,WAAW,CAAC;AACxD,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  html as baseHtml,\n  type CompiledTemplateResult,\n  type TemplateResult,\n} from 'lit-html';\nimport {isServer} from 'lit-html/is-server.js';\n\nconst SERVER_ONLY = 1;\n\nexport interface ServerRenderedTemplate extends TemplateResult {\n  _$litServerRenderMode: typeof SERVER_ONLY;\n}\n\n/**\n * A lit-html template that can only be rendered on the server, and cannot be\n * hydrated.\n *\n * These templates can be used for rendering full documents, including the\n * doctype, and rendering into elements that Lit normally cannot, like\n * `<title>`, `<textarea>`, `<template>`, and non-executing `<script>` tags\n * like `<script type=\"text/json\">`. They are also slightly more efficient than\n * normal Lit templates, because the generated HTML doesn't need to include\n * markers for updating.\n *\n * Server-only `html` templates can be composed, and combined, and they support\n * almost all features that normal Lit templates do, with the exception of\n * features that don't have a pure HTML representation, like event handlers or\n * property bindings.\n *\n * Server-only `html` templates can only be rendered on the server, they will\n * throw an Error if created in the browser. However if you render a normal Lit\n * template inside a server-only template, then it can be hydrated and updated.\n * Likewise, if you place a custom element inside a server-only template, it can\n * be hydrated and update like normal.\n *\n * A server-only template can't be rendered inside a normal Lit template.\n */\nexport function html(\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): ServerRenderedTemplate {\n  if (!isServer) {\n    throw new Error(\n      `server-only templates can only be rendered on the server, they cannot be rendered in the browser. Use the html function for templates that need to be rendered from the browser. This check is based on the \"node\" export condition: https://nodejs.org/api/packages.html#conditional-exports`\n    );\n  }\n  const value = baseHtml(strings, ...values) as ServerRenderedTemplate;\n  value._$litServerRenderMode = SERVER_ONLY;\n  return value;\n}\n\n/**\n * If true, the given template result is from a normal lit-html template, and\n * not a server-only template.\n *\n * Server-only templates are only rendered once, they don't create the\n * marker comments needed to identify and update their dynamic parts.\n */\nexport const isHydratable = (template: MaybeServerTemplate): boolean => {\n  return template._$litServerRenderMode !== SERVER_ONLY;\n};\n\ntype MaybeCompiledTemplate = TemplateResult | CompiledTemplateResult;\n\ntype MaybeServerTemplate = MaybeCompiledTemplate & {\n  _$litServerRenderMode?: typeof SERVER_ONLY;\n};\n"]}